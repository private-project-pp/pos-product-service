// Code generated by MockGen. DO NOT EDIT.
// Source: domain/product_unit.go
//
// Generated by this command:
//
//	mockgen -source=domain/product_unit.go -destination=mocks/postgre_repo/product_unit.go -package=mocks_postgre_repo
//

// Package mocks_postgre_repo is a generated GoMock package.
package mocks_postgre_repo

import (
	reflect "reflect"

	entity "github.com/private-project-pp/product-rpc-service/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockProductUnit is a mock of ProductUnit interface.
type MockProductUnit struct {
	ctrl     *gomock.Controller
	recorder *MockProductUnitMockRecorder
	isgomock struct{}
}

// MockProductUnitMockRecorder is the mock recorder for MockProductUnit.
type MockProductUnitMockRecorder struct {
	mock *MockProductUnit
}

// NewMockProductUnit creates a new mock instance.
func NewMockProductUnit(ctrl *gomock.Controller) *MockProductUnit {
	mock := &MockProductUnit{ctrl: ctrl}
	mock.recorder = &MockProductUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUnit) EXPECT() *MockProductUnitMockRecorder {
	return m.recorder
}

// AddProductUnit mocks base method.
func (m *MockProductUnit) AddProductUnit(in entity.UnitOfMeasuremnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductUnit", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductUnit indicates an expected call of AddProductUnit.
func (mr *MockProductUnitMockRecorder) AddProductUnit(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductUnit", reflect.TypeOf((*MockProductUnit)(nil).AddProductUnit), in)
}

// GetProductUnitById mocks base method.
func (m *MockProductUnit) GetProductUnitById(in string) (entity.UnitOfMeasuremnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductUnitById", in)
	ret0, _ := ret[0].(entity.UnitOfMeasuremnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductUnitById indicates an expected call of GetProductUnitById.
func (mr *MockProductUnitMockRecorder) GetProductUnitById(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductUnitById", reflect.TypeOf((*MockProductUnit)(nil).GetProductUnitById), in)
}

// UpdateProductUnit mocks base method.
func (m *MockProductUnit) UpdateProductUnit(in entity.UnitOfMeasuremnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductUnit", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductUnit indicates an expected call of UpdateProductUnit.
func (mr *MockProductUnitMockRecorder) UpdateProductUnit(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductUnit", reflect.TypeOf((*MockProductUnit)(nil).UpdateProductUnit), in)
}
