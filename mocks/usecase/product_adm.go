// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/product_adm/product_adm.go
//
// Generated by this command:
//
//	mockgen -source=usecase/product_adm/product_adm.go -destination=mocks/usecase/product_adm.go -package=mocks_usecase
//

// Package mocks_usecase is a generated GoMock package.
package mocks_usecase

import (
	context "context"
	reflect "reflect"

	product_service "github.com/private-project-pp/pos-grpc-contract/model/product_service"
	gomock "go.uber.org/mock/gomock"
)

// MockProductAdministration is a mock of ProductAdministration interface.
type MockProductAdministration struct {
	ctrl     *gomock.Controller
	recorder *MockProductAdministrationMockRecorder
	isgomock struct{}
}

// MockProductAdministrationMockRecorder is the mock recorder for MockProductAdministration.
type MockProductAdministrationMockRecorder struct {
	mock *MockProductAdministration
}

// NewMockProductAdministration creates a new mock instance.
func NewMockProductAdministration(ctrl *gomock.Controller) *MockProductAdministration {
	mock := &MockProductAdministration{ctrl: ctrl}
	mock.recorder = &MockProductAdministrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductAdministration) EXPECT() *MockProductAdministrationMockRecorder {
	return m.recorder
}

// AddNewProductUnit mocks base method.
func (m *MockProductAdministration) AddNewProductUnit(ctx context.Context, in *product_service.UpsertUnitRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewProductUnit", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewProductUnit indicates an expected call of AddNewProductUnit.
func (mr *MockProductAdministrationMockRecorder) AddNewProductUnit(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewProductUnit", reflect.TypeOf((*MockProductAdministration)(nil).AddNewProductUnit), ctx, in)
}

// AddingNewProduct mocks base method.
func (m *MockProductAdministration) AddingNewProduct(ctx context.Context, in *product_service.AddProductRequest) (*product_service.AddProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddingNewProduct", ctx, in)
	ret0, _ := ret[0].(*product_service.AddProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddingNewProduct indicates an expected call of AddingNewProduct.
func (mr *MockProductAdministrationMockRecorder) AddingNewProduct(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddingNewProduct", reflect.TypeOf((*MockProductAdministration)(nil).AddingNewProduct), ctx, in)
}

// UpdateExistingUnit mocks base method.
func (m *MockProductAdministration) UpdateExistingUnit(in *product_service.UpsertUnitRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExistingUnit", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExistingUnit indicates an expected call of UpdateExistingUnit.
func (mr *MockProductAdministrationMockRecorder) UpdateExistingUnit(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExistingUnit", reflect.TypeOf((*MockProductAdministration)(nil).UpdateExistingUnit), in)
}

// UpsertUnit mocks base method.
func (m *MockProductAdministration) UpsertUnit(ctx context.Context, in *product_service.UpsertUnitRequest) (*product_service.UpsertUnitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUnit", ctx, in)
	ret0, _ := ret[0].(*product_service.UpsertUnitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUnit indicates an expected call of UpsertUnit.
func (mr *MockProductAdministrationMockRecorder) UpsertUnit(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUnit", reflect.TypeOf((*MockProductAdministration)(nil).UpsertUnit), ctx, in)
}
