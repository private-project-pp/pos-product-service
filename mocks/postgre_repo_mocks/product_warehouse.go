// Code generated by MockGen. DO NOT EDIT.
// Source: domain/product_warehouse.go
//
// Generated by this command:
//
//	mockgen -source=domain/product_warehouse.go -destination=mocks/postgre_repo_mocks/product_warehouse.go -package=postgre_repo_mocks
//

// Package postgre_repo_mocks is a generated GoMock package.
package postgre_repo_mocks

import (
	reflect "reflect"

	entity "github.com/private-project-pp/product-rpc-service/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockProductWarehouse is a mock of ProductWarehouse interface.
type MockProductWarehouse struct {
	ctrl     *gomock.Controller
	recorder *MockProductWarehouseMockRecorder
	isgomock struct{}
}

// MockProductWarehouseMockRecorder is the mock recorder for MockProductWarehouse.
type MockProductWarehouseMockRecorder struct {
	mock *MockProductWarehouse
}

// NewMockProductWarehouse creates a new mock instance.
func NewMockProductWarehouse(ctrl *gomock.Controller) *MockProductWarehouse {
	mock := &MockProductWarehouse{ctrl: ctrl}
	mock.recorder = &MockProductWarehouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductWarehouse) EXPECT() *MockProductWarehouseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductWarehouse) AddProduct(in entity.ProductsWarehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductWarehouseMockRecorder) AddProduct(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductWarehouse)(nil).AddProduct), in)
}

// GetProductByID mocks base method.
func (m *MockProductWarehouse) GetProductByID(id string) (entity.ProductsWarehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(entity.ProductsWarehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductWarehouseMockRecorder) GetProductByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductWarehouse)(nil).GetProductByID), id)
}

// UpdateProduct mocks base method.
func (m *MockProductWarehouse) UpdateProduct(in entity.ProductsWarehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductWarehouseMockRecorder) UpdateProduct(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductWarehouse)(nil).UpdateProduct), in)
}
