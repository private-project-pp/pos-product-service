// Code generated by MockGen. DO NOT EDIT.
// Source: domain/product.go
//
// Generated by this command:
//
//	mockgen -source=domain/product.go -destination=mocks/postgre_repo_mocks/product.go -package=postgre_repo_mocks
//

// Package postgre_repo_mocks is a generated GoMock package.
package postgre_repo_mocks

import (
	reflect "reflect"

	entity "github.com/private-project-pp/product-rpc-service/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
	isgomock struct{}
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProduct) AddProduct(tx *gorm.DB, in entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", tx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductMockRecorder) AddProduct(tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProduct)(nil).AddProduct), tx, in)
}

// BulkAddProductImages mocks base method.
func (m *MockProduct) BulkAddProductImages(tx *gorm.DB, in []entity.ProductsImages) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkAddProductImages", tx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkAddProductImages indicates an expected call of BulkAddProductImages.
func (mr *MockProductMockRecorder) BulkAddProductImages(tx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkAddProductImages", reflect.TypeOf((*MockProduct)(nil).BulkAddProductImages), tx, in)
}
